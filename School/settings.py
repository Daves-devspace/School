"""
Django settings for School project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import socket
from datetime import timedelta
from pathlib import Path

import dj_database_url
import redis
from decouple import config
from django.contrib import messages
from django.core.cache.backends.redis import RedisCache
from dotenv import load_dotenv
import environ
from redis.connection import BlockingConnectionPool

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-0yg9%d29(l9u^17*mm5=*%&jpev!x(&s(9q!ih12@i0a03zual'

# # SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # change to false in production
#
ALLOWED_HOSTS = ['school-kbah.onrender.com','localhost']  # Replace '*' with your domain or IP for production

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.Manage.apps.ManageConfig',
    'django.contrib.postgres',
    'phonenumber_field',
    'apps.students',
    'apps.teachers',
    'apps.management',
    'apps.accounts',
    'apps.website',
    'django_crontab',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_daraja',
    'channels',
    'apps.schedules',
    'rest_framework',
    'rest_framework.authtoken',
    'ckeditor',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

    # logs
    # 'apps.Manage.middleware.GroupRedirectMiddleware',
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # Default authentication backend
    'apps.teachers.backend.StaffNumberBackend',  # Your custom backend
)


ROOT_URLCONF = 'School.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ASGI application path
ASGI_APPLICATION = 'School.asgi.application'

# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': "redis://red-cu9dmstds78s739cl7pg:6379/1",  # This should be the correct Redis container name and port
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         }
#
#     }
# }
# Detect environment by checking hostname
# Single source of truth for Redis URL
REDIS_URL = os.getenv('REDIS_URL', 'redis://redis:6379/1')

# Caching settings
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Test Redis connection
try:
    r = redis.StrictRedis.from_url(REDIS_URL, decode_responses=True)
    r.ping()
    print("Connected to Redis successfully.")
except redis.exceptions.ConnectionError as e:
    print(f"Redis connection error: {e}")
# For Celery or other Redis integrations
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'


# settings.py
#
# # Redis setup for caching (if using Redis for caching)
# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://redis:6379/1',  # Redis container name from docker-compose.yml
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     }
# }

# Redis setup for Django Channels (if using WebSockets)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('redis', 6379)],  # Redis container name from docker-compose.yml
        },
    },
}
CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_SECURE = False  # Ensures CSRF cookie is sent only over HTTPS
CSRF_COOKIE_SAMESITE = 'Strict'  # Helps to prevent cross-site request forgery attacks


CKEDITOR_5_CONFIGS  = {
    'default': {
        'toolbar': 'full',  # Enables all toolbar options for the editor
        'height': 300,  # Sets the height of the editor to 300px
        'width': 'auto',  # Makes the width of the editor responsive
        'extraPlugins': ','.join(['codesnippet', 'justify']),  # Adds custom plugins: code snippet and justify
    },
}

# REDIS_HOST = os.getenv('REDIS_HOST', 'redis')  # Use the Redis container name
# REDIS_URL = "redis://redis:6379/0"  # Make sure 'redis' is the correct container name
# REDIS_PORT = 6379  # Default Redis port
# REDIS_DB = 0
#
# r = redis.StrictRedis(host='172.18.0.3', port=6379, db=0)
# r.ping()


# # Example of setting up a connection:
# redis_conn = redis.StrictRedis(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB)

pool = BlockingConnectionPool.from_url(
    REDIS_URL, max_connections=50, timeout=10
)
r = redis.StrictRedis(connection_pool=pool, decode_responses=True)

WSGI_APPLICATION = 'School.wsgi.application'
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'test_db',
#         'USER': 'root',
#         'PASSWORD': '',
#         'HOST': 'localhost',
#         'PORT': '3306',
#
#     }
# }


# Email settings for mail.valuetech.co.ke
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'mail.valuetech.co.ke'  # Outgoing mail server
EMAIL_PORT = 465  # SMTP port for secure connections
EMAIL_USE_SSL = True  # Use SSL for secure email transmission
EMAIL_HOST_USER = 'admin@valuetech.co.ke'  # Your email address
EMAIL_HOST_PASSWORD = 'davedevspace'  # Replace with your email account's password
DEFAULT_FROM_EMAIL = 'ValueTech Admin <admin@valuetech.co.ke>'


# # Database configuration
# # Read .env file if it exists
# env = environ.Env(
#     DEBUG=(bool, False)  # Default DEBUG to False
# )
#
# # Load .env file
# environ.Env.read_env()

# DEBUG = env('DEBUG')

# DATABASES = {
#     'default': env.db()
# }



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'error.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}


# DATABASES = {
#     'default': dj_database_url.config(
#         default=os.getenv('DATABASE_URL'),  # Render automatically sets DATABASE_URL
#         conn_max_age=600,
#         ssl_require=True
#     )
# }

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.environ.get('DB_NAME'),
#         'USER': os.environ.get('DB_USER'),
#         'PASSWORD': os.environ.get('DB_PASSWORD'),
#         'HOST': os.environ.get('DB_HOST', 'localhost'),
#         'PORT': os.environ.get('DB_PORT', '5432'),
#     }
# }


# General Settings
DEBUG = config("DEBUG", default=True, cast=bool)
SECRET_KEY = config("DJANGO_SECRET_KEY", default="fallback_secret_key")

# Database Configuration
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("DB_NAME"),
        "USER": config("DB_USER"),
        "PASSWORD": config("DB_PASSWORD"),
        "HOST": config("DB_HOST", default="localhost"),
        "PORT": config("DB_PORT", default="5432"),
    }
}

# Static/Media File Handling
# USE_S3 = config("USE_S3", default=False, cast=bool)
# if USE_S3:
#     AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
#     AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
#     AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
#     STATIC_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/static/"
#     MEDIA_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/media/"
# else:
#     STATIC_URL = "/static/"
#     MEDIA_URL = "/media/"
#     STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
#     MEDIA_ROOT = os.path.join(BASE_DIR, "media")
#     STATIC_ROOT = os.path.join(BASE_DIR, "static_files")
#


STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static_files')  # for  deployment

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Optional: Debugging output for confirmation (remove or comment in production)

# DATABASES = {
#     'default': dj_database_url.config(
#         default=os.getenv(
#             'DATABASE_URL',  # This should be set in your Render environment
#             'postgresql://davedevspace:f2CN8IZAIL7zFg7LjhTgHyxZTtlJe4hL@dpg-cu6pc4i3esus73fcve20-a/school_db_1j40'
#         )
#     )
# }



REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',  # Only JSON responses
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',  # Default: Require authentication for all views
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),  # Short-lived access token
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Longer-lived refresh token
    'ROTATE_REFRESH_TOKENS': True,  # Issue a new refresh token when used
    'BLACKLIST_AFTER_ROTATION': True,  # Blacklist old refresh tokens
}

# MobileSasa API Credentials
MOBILESASA_API_TOKEN = os.getenv("MOBILESASA_API_TOKEN")
MOBILESASA_SENDER_ID = os.getenv("MOBILESASA_SENDER_ID")


# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('DB_NAME', 'test_db'),
#         'USER': os.environ.get('DB_USER', 'root'),
#         'PASSWORD': os.environ.get('DB_PASSWORD', 'yourpassword'),
#         'HOST': os.environ.get('DB_HOST', 'mysql-db'),  # Use the service name as host
#         'PORT': os.environ.get('DB_PORT', '3306'),
#     }
# }
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"  # Or the framework you use
CRISPY_TEMPLATE_PACK = "bootstrap5"

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

LOGIN_URL = 'login'

# The Mpesa environment to use
# Possible values: sandbox, production

MPESA_ENVIRONMENT = 'sandbox'

# Credentials for the daraja app

MPESA_CONSUMER_KEY = os.getenv('mpesa_consumer_key')
MPESA_CONSUMER_SECRET = os.getenv('mpesa_consumer_secret')

# Shortcode to use for transactions. For sandbox  use the Shortcode 1 provided on test credentials page

MPESA_SHORTCODE = 'mpesa_shortcode'

# Shortcode to use for Lipa na MPESA Online (MPESA Express) transactions
# This is only used on sandbox, do not set this variable in production
# For sandbox use the Lipa na MPESA Online Shorcode provided on test credentials page

MPESA_EXPRESS_SHORTCODE = 'mpesa_express_shortcode'

# Type of shortcode
# Possible values:
# - paybill (For Paybill)
# - till_number (For Buy Goods Till Number)

MPESA_SHORTCODE_TYPE = 'paybill'

# Lipa na MPESA Online passkey
# Sandbox passkey is available on test credentials page
# Production passkey is sent via email once you go live

MPESA_PASSKEY = 'mpesa_passkey'

# Username for initiator (to be used in B2C, B2B, AccountBalance and TransactionStatusQuery Transactions)

MPESA_INITIATOR_USERNAME = 'initiator_username'

# Plaintext password for initiator (to be used in B2C, B2B, AccountBalance and TransactionStatusQuery Transactions)

MPESA_INITIATOR_SECURITY_CREDENTIAL = 'initiator_security_credential'
